%div{class: 'page-header'}
    %h2 Mock Server - Create/Update mock data
    %blockquote
        %p{class: "lead text-info"} Create mock responses by specifying the request URL's, response headers, status code and response body ! If you have an endpoint already active then just type in the URL and GET the URL data to automatically populate the status code, headers and the response body.

%form{action: '/mock/create', method: 'post', id: 'form_form'}
    %div{class: 'row'}
        %div{class: 'form-group col-md-6'}
            %label{class: 'control-label', for: 'mock_name'} Mock Request Name
            %input{type: 'text', class: 'form-control', id: 'autocomplete', name: 'mock_name', placeholder: 'Mock request name is required', value: "#{mock_data.nil? ? nil : mock_data.mock_name }", autocomplete: 'off'}
            %label{class: 'control-label'}
        %div{class: 'form-group col-md-3'}
            %label{class: 'control-label',for: 'mock_http_status'} Response HTTP Status Code
            %input{type: 'text', class: 'form-control', name: 'mock_http_status', placeholder: '1xx, 2xx, 3xx, 4xx or 5xx', value: "#{mock_data.nil? ? nil : mock_data.mock_http_status }"}
        %div{class: 'form-group col-md-3'}
            %label{class: 'control-label',for: 'mock_state'} Mock State
            %div{class: 'checkbox'}
                %label
                    %input{type: 'checkbox', id: 'chk_mock_state',name: 'mock_state', value: "#{mock_data.nil? ? nil : (mock_data.mock_state == true ? '1' : '0') }"}
                    Enable/Disable Mock Response
    %div{class: 'row'}
        %div{class: 'form-group'}
            %div{class: 'col-md-10'}
                %label{class: 'control-label', for: 'mock_request_url'} Request URL To mock
                %input{type: 'text', class: 'form-control',id: 'mock_request_url', name: 'mock_request_url', placeholder: 'Request URL is required', onchange: 'urlChanged()', value: "#{mock_data.nil? ? nil : mock_data.mock_request_url }", autocomplete: 'off'}
            %div{class: 'col-md-2'}
                %label{class: 'control-label'} Clone existing data
                %button{type: 'button', id: 'get_button' ,class: 'btn btn-primary', onclick: "getCloningData()"} GET
    %div{class: 'row'}
        %div{class: 'form-group col-md-2'}
            %label{class: 'control-label',for: 'mock_http_verb'} HTTP Verb
            %select{class: 'form-control', id: 'sl_mock_http_verb',name: 'mock_http_verb', value: "#{mock_data.nil? ? nil : mock_data.mock_http_verb }"}
                %option{id: 'GET'} GET
                %option{id: 'POST'} POST
                %option{id: 'PUT'} PUT
                %option{id: 'DELETE'} DELETE
        %div{class: 'form-group col-md-2'}
            %label{class: 'control-label',for: 'mock_environment'} Test Environment
            %select{class: 'form-control', id: 'sl_mock_environment',name: 'mock_environment', value: "#{mock_data.nil? ? nil : mock_data.mock_environment }"}
                %option{id: 'integration'} integration
                %option{id: 'production'} production
                %option{id: 'quality'} quality
        %div{class: 'form-group col-md-2'}
            %label{class: 'control-label',for: 'mock_content_type'} Response Content Type
            %select{class: 'form-control', id: 'id_mock_content_type',name: 'mock_content_type', value: "#{mock_data.nil? ? nil : mock_data.mock_content_type }"}
                %option{id: 'app_json'} application/json;charset=UTF-8
                %option{id: 'text_xml'} text/xml
                %option{id: 'text_html'} text/html
                %option{id: 'image_png'} image/png
                %option{id: 'image_jpeg'} image/jpeg
        %div{class: 'form-group col-md-6'}
            %label{class: 'control-label',for: 'mock_data_response_headers'} Other Delimited (#{ENV['HEADER_DELIMITER']})Response Header(s)
            %textarea{class: 'form-control', name: 'mock_data_response_headers', rows: 8}#{mock_data.nil? ? 'X-mocked'+ENV['HEADER_DELIMITER']+'True' : mock_data.mock_data_response_headers}
    %div{class: 'row'}
        %div{class: 'form-group col-md-12'}
            %label{class: 'control-label',for: 'mock_data_response'} Response Body
            %textarea{id: 'json_body', class: 'form-control', name: 'mock_data_response', placeholder: 'Response Body', rows: 30, onchange: 'validateJsonBody(this)'}#{mock_data.nil? ? nil : mock_data.mock_data_response }
    %div{class: 'row hidden'}
        %input{type: 'text', name: 'id', value: "#{mock_data.nil? ? nil : (mock_data.id) }"}
    %button(type="submit" class="btn btn-primary btn-lg btn-block")Create/Update Mock Data

    :javascript
        var mockStatuscheckbox = document.getElementById("chk_mock_state");
        if (mockStatuscheckbox.value == '1') {
            document.getElementById('chk_mock_state').checked = true;
        }
        var slVerb = document.getElementById('sl_mock_http_verb').getAttribute('value');
        var slVerbOption = document.getElementById(slVerb);
        slVerbOption.setAttribute("selected", "selected");

        var slEnv = document.getElementById('sl_mock_environment').getAttribute('value');
        var slOption = document.getElementById(slEnv);
        slOption.setAttribute("selected", "selected");

        var slContentType = document.getElementById('id_mock_content_type').getAttribute('value');
        var slcType = ''
        switch(slContentType) {
            case 'application/json;charset=UTF-8':
                slcType = document.getElementById('app_json');
                break;
            case 'text/xml':
                slcType = document.getElementById('text_xml');
                break;
            case 'text/html':
                slcType = document.getElementById('text_html');
                break;
            case 'image/png':
                slcType = document.getElementById('image_png');
                break;
            case 'image/jpeg':
                slcType = document.getElementById('image_jpeg');
                break;
        }
        slcType.setAttribute("selected", "selected");
